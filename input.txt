typedef struct telebot_user {
    /** Unique identifier for this user or bot */
    int id;

    /** True, if this user is a bot */
    bool is_bot;

    /** User's or bot's first name. */
    char* first_name;

    /** Optional. User's or bot's last name */
    char* last_name;

    /** Optional. User's or bot's username */
    char* username;

    /** Optional. IETF language tag of the user's language */
    char* language_code;
} telebot_user_t;

/**
 * @brief This object represents a chat.
 */
typedef struct telebot_chat {
    /** Unique identifier for this chat, not exceeding 1e13 by absolute value */
    // NOTE(erick): Should we use an int64 here?
    // Yes, we should.
    int id;

    /** Type of chat, can be either “private”, “group”, “supergroup” or “channel” */
    char* type;

    /** Optional. Title, for channels and group chats */
    char* title;

    /** Optional. Username, for private chats and channels if available */
    char* username;

    /** Optional. First name of the other party in a private chat */
    char* first_name;

    /** Optional. Last name of the other party in a private chat */
    char* last_name;
} telebot_chat_t;

/**
 * @brief This object represents one size of a photo or a file / sticker
 * thumbnail.
 */
typedef struct telebot_photo {
    /** Unique identifier for this file */
    char file_id[TELEBOT_FILE_ID_SIZE];

    /** Photo width */
    int width;

    /** Photo height */
    int height;

    /** Optional. File size */
    int file_size;
} telebot_photo_t;

/**
 * @brief This object represents an audio file to be treated as music by the
 * Telegram clients.
 */
typedef struct telebot_audio {
    /** Unique identifier for this file */
    char file_id[TELEBOT_FILE_ID_SIZE];

    /** Duration of the audio in seconds as defined by sender */
    int duration;

    /** Optional. Performer of the audio as defined by sender or by audio tags */
    char performer[TELEBOT_AUDIO_PERFORMER_SIZE];

    /** Optional. Title of the audio as defined by sender or by audio tags */
    char title[TELEBOT_AUDIO_TITLE_SIZE];

    /** Optional. MIME type of the file as defined by sender */
    char mime_type[TELEBOT_AUDIO_MIME_TYPE_SIZE];

    /** Optional. File size */
    int file_size;
} telebot_audio_t;

/**
 * @brief This object represents a general file (as opposed to photos, voice
 * messages and audio files).
 */
typedef struct telebot_document {
    /** Unique file identifier. */
    char file_id[TELEBOT_FILE_ID_SIZE];

    /** Optional. Document thumbnail as defined by sender. */
    telebot_photo_t thumb;

    /** Optional. Original filename as defined by sender. */
    char file_name[TELEBOT_FILE_NAME_SIZE];

    /** Optional. MIME type of the file as defined by sender. */
    char mime_type[TELEBOT_DOCUMENT_MIME_TYPE_SIZE];

    /** Optional. File size. */
    int file_size;
} telebot_document_t;

/**
 * @brief This object represents a sticker.
 */
// TODO(erick): This type needs to be revised.
typedef struct telebot_sticker {
    /** Unique identifier for this file */
    char file_id[TELEBOT_FILE_ID_SIZE];

    /** Sticker width */
    int width;

    /** Sticker height */
    int height;

    /** Optional. Sticker thumbnail in .webp or .jpg format */
    telebot_photo_t thumb;

    /** Optional. File size */
    int file_size;
} telebot_sticker_t;

/**
 * @brief This object represents a video file.
 */
typedef struct telebot_video {
    /** Unique identifier for this file */
    char file_id[TELEBOT_FILE_ID_SIZE];

    /** Video width as defined by sender */
    int width;

    /** Video height as defined by sender */
    int height;

    /** Duration of the video in seconds as defined by sender */
    int duration;

    /** Optional. Video thumbnail */
    telebot_photo_t thumb;

    /** Optional. Mime type of a file as defined by sender */
    char mime_type[TELEBOT_VIDEO_MIME_TYPE_SIZE];

    /** Optional. File size */
    int file_size;
} telebot_video_t;

/**
 * @brief This object represents a voice note.
 */
typedef struct telebot_voice {
    /** Unique identifier for this file */
    char file_id[TELEBOT_FILE_ID_SIZE];

    /** Duration of the audio in seconds as defined by sender */
    int duration;

    /** Optional. MIME type of the file as defined by sender */
    char mime_type[TELEBOT_VOICE_MIME_TYPE_SIZE];

    /** Optional. File size */
    int file_size;
} telebot_voice_t;

/**
 * @brief This object represents a phone contact.
 */
typedef struct telebot_contact {
    /** Contact's phone number */
    char phone_number[TELEBOT_PHONE_NUMBER_SIZE];

    /** Contact's first name */
    char first_name[TELEBOT_FIRST_NAME_SIZE];

    /** Optional. Contact's last name */
    char last_name[TELEBOT_LAST_NAME_SIZE];

    /** Optional. Contact's user identifier in Telegram */
    int user_id;
} telebot_contact_t;

/**
 * @brief This object represents a point on the map.
 */

typedef struct telebot_location {
   /** Longitude as defined by sender */
    float longitude;

    /** Latitude as defined by sender */
    float latitude;
} telebot_location_t;

/**
 * @brief This object represents a file ready to be downloaded.
 *
 * The file can be downloaded via the link
 * https://api.telegram.org/file/bot[token]/[file_path].
 * It is guaranteed that the link will be valid for at least 1 hour.
 * When the link expires, a new one can be requested by calling getFile.
 * Maximum file size to download is 20 MB.
 */
typedef struct telebot_file {
    /** Unique identifier for this file */
    char file_id[TELEBOT_FILE_ID_SIZE];

    /** Optional. File size, if known */
    int file_size;

    /**  Optional. File path. */
    char file_path[TELEBOT_FILE_PATH_SIZE];
} telebot_file_t;


/**
 * @brief This object represents a message.
 */
typedef struct telebot_message {
    /** Unique message identifier */
    int message_id;

    /** Optional. Sender, can be empty for messages sent to channels */
    telebot_user_t from;

    /** Date the message was sent in Unix time */
    long date;

    /** Conversation the message belongs to */
    telebot_chat_t chat;

    /** Optional. For forwarded messages, sender of the original message */
    telebot_user_t forward_from;

    /**
     * Optional. For forwarded messages, date the original message was sent
     * in Unix time
     */
    long forward_date;

    /**
     * For replies, the original message. Note that the Message object in this
     * field will not contain further reply_to_message fields even if it itself
     * is a reply.
     */
    struct telebot_message  *reply_to_message;

    /** Optional. For text messages, the actual UTF-8 text of the message */
    // TODO(erick): A message length should not be hardcoded.
    char text[TELEBOT_MESSAGE_TEXT_SIZE];

    /** Optional. Message is an audio file, information about the file */
    telebot_audio_t audio;

    /** Optional. Message is a general file, information about the file */
    telebot_document_t document;

    /** Optional. Message is a photo, available sizes of the photo */
    telebot_photo_t photo[TELEBOT_MESSAGE_PHOTO_SIZE];

    /** Optional. Message is a sticker, information about the sticker */
    telebot_sticker_t sticker;

    /** Optional. Message is a video, information about the video */
    telebot_video_t video;

    /** Optional. Message is a voice message, information about the file */
    telebot_voice_t voice;

    /** Optional. Caption for the photo or video */
    char caption[TELEBOT_MESSAGE_CAPTION_SIZE];

    /** Optional. Message is a shared contact, information about the contact */
    telebot_contact_t contact;

    /** Optional. Message is a shared location, information about the location */
    telebot_location_t location;

    /**
     * Optional. A new member was added to the group, information about them
     * (this member may be bot itself)
     */
    telebot_user_t new_chat_participant;

    /**
     * Optional. A member was removed from the group, information about them
     * (this member may be bot itself)
     */
    telebot_user_t left_chat_participant;

    /** Optional. A chat title was changed to this value */
    char new_chat_title[TELEBOT_CHAT_TITLE_SIZE];

    /** Optional. A chat photo was change to this value */
    telebot_photo_t new_chat_photo[TELEBOT_MESSAGE_NEW_CHAT_PHOTO_SIZE];

    /** Optional. Informs that the chat photo was deleted */
    bool delete_chat_photo;

    /** Optional. Informs that the group has been created */
    bool group_chat_created;

    /** Optional. Service message: the supergroup has been created */
    bool supergroup_chat_created;

    /** Optional. Service message: the channel has been created */
    bool channel_chat_created;

    /**
     * Optional. The group has been migrated to a supergroup with the specified
     * identifier, not exceeding 1e13 by absolute value
     */
    int migrate_to_chat_id;

    /**
     * Optional. The supergroup has been migrated from a group with the
     * specified identifier, not exceeding 1e13 by absolute value
     */
    int migrate_from_chat_id;

} telebot_message_t;

typedef struct telebot_callback_query {
    char *id;
    telebot_user_t from;
    telebot_message_t message;
    char *inline_message_id;
    char *chat_instance;
    char *data;
    char *game_short_name;
} telebot_callback_query_t;

typedef enum telebot_update_type {
    // TODO(erick): We didn't implemented the following types:
    /*
     * edited_message
     * channel_post
     * edited_channel_post
     * inline_query
     * chosen_inline_result
     * shipping_query
     * pre_checkout_query
    */
    UPDATE_TYPE_MESSAGE,
    UPDATE_TYPE_CALLBACK_QUERY,
}telebot_update_type_t;

/**
 * @brief This object represents an incoming update.
 */
typedef struct telebot_update {
    /**
     * The update's unique identifier. Update identifiers start from a certain
     * positive number and increase sequentially.
     */
    int update_id;

    /**
     * The type of the update.
     */
    telebot_update_type_t update_type;

    union {
        /** New incoming message of any kind — text, photo, sticker, etc. */
        telebot_message_t message;

        telebot_callback_query_t callback_query;
    };
} telebot_update_t;


/**
 * @brief This object represent a keyboard (both a ReplyKeyboard and a InlineKeyboard).
 */
typedef struct {
    /**
     * A JSON Object to represent the keyboard.
     */
    json_object* keyboard_obj;

    /**
     * A reference to the rows of buttons array.
     * Used by 'telebot_reply_keyboard_add_row()'
     */
    json_object* rows;
    /**
     * A reference to the current row of buttons.
     * Used by 'telebot_reply_keyboard_add_button()'
     */
    json_object* current_row;
} telebot_keyboard;
